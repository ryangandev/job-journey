// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum UserPlan {
  FREE
  PREMIUM
}

enum JobSetting {
  on_site
  remote
  hybrid
}

enum JobType {
  full_time
  part_time
  contract
  freelance
}

enum JobLevel {
  intern
  entry
  junior
  associate
  mid
  mid_senior
  senior
  lead
  manager
  director
  executive
}

enum JobStatus {
  not_applied
  applied
  interviewing
  offered
  rejected
  not_selected
  ghosted
}

enum ApplicationUpdateType {
  submission
  note
  interview
  offer
  rejection
  auto_generated
}

enum ProfilePlatform {
  discord
  git_hub
  gmail
  hacker_rank
  leet_code
  linked_in
  twitter
  portfolio
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  userPlan      UserPlan  @default(FREE)

  accounts     Account[]
  applications Application[]
  profileLinks ProfileLink[]
  resumes      Resume[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("verification_tokens")
}

model Application {
  id                  String     @id @default(cuid())
  userId              String     @map("user_id")
  title               String     @default("N/A")
  company             String     @default("N/A")
  location            String     @default("N/A")
  setting             JobSetting @default(on_site)
  type                JobType    @default(full_time)
  level               JobLevel   @default(entry)
  status              JobStatus  @default(not_applied)
  isFavorite          Boolean    @default(false) @map("is_favorite")
  replied             Boolean    @default(false)
  interviewAquired    Boolean    @default(false) @map("interview_aquired")
  appliedAt           DateTime   @default(now()) @map("applied_at")
  updatedAt           DateTime   @updatedAt @map("updated_at")
  salary              String
  jobPostingLink      String     @map("job_posting_link")
  statusTrackingLinks String[]   @map("status_tracking_links")

  updates ApplicationUpdate[]
  user    User                @relation(fields: [userId], references: [id])

  @@map("applications")
}

model ApplicationUpdate {
  id            String                @id @default(cuid())
  applicationId String                @map("application_id")
  type          ApplicationUpdateType @default(note)
  content       String
  createdAt     DateTime              @default(now()) @map("created_at")

  application Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@map("application_updates")
}

model ProfileLink {
  id       String          @id @default(cuid())
  userId   String          @map("user_id")
  platform ProfilePlatform
  url      String
  position Int             @default(0)

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, position])
  @@map("profile_links")
}

model Resume {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  filename  String
  content   Bytes
  isMain    Boolean  @default(false) @map("is_main")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id])

  @@map("resumes")
}
