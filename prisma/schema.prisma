// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum JobSetting {
  on_site
  remote
  hybrid
}

enum JobType {
  full_time
  part_time
  contract
  freelance
}

enum JobLevel {
  intern
  entry
  junior
  associate
  mid
  mid_senior
  senior
  lead
  manager
  director
  executive
}

enum JobStatus {
  applied
  interviewing
  offered
  rejected
  ghosted
}

model Application {
  id               String     @id @default(uuid())
  userId           String     @map("user_id")
  title            String     @default("N/A") @db.VarChar(100)
  company          String     @default("N/A") @db.VarChar(100)
  location         String     @default("N/A") @db.VarChar(100)
  setting          JobSetting @default(on_site)
  type             JobType    @default(full_time)
  level            JobLevel   @default(entry)
  status           JobStatus  @default(applied)
  isFavorite       Boolean    @default(false) @map("is_favorite")
  replied          Boolean    @default(false)
  interviewAquired Boolean    @default(false) @map("interview_aquired")
  appliedAt        DateTime   @default(now()) @map("applied_at")
  updatedAt        DateTime   @updatedAt @map("updated_at")
  salary           String     @default("N/A") @db.VarChar(100)
  link             String     @default("N/A") @db.VarChar(4000)
  updates          Json[]
  user             User       @relation(fields: [userId], references: [id])

  @@map("applications")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?     @map("email_verified")
  image         String?       @map("image")
  password      String?
  accounts      Account[]
  applications  Application[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}
